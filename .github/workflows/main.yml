name: CI/CD Pipeline

on:
  push:
    branches: ['main']

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Setup node.js 20.9.0
        uses: actions/setup-node@v3
        with:
          node-version: 20.9.0
          cache: 'yarn'
      - run: yarn install
      - run: yarn test

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Create .env file
        run: |
          echo SERVER_PORT=${{ secrets.SERVER_PORT }} >> .env
          echo MONGODB_URL=${{ secrets.MONGODB_URL }} >> .env
          echo MONGODB_PORT=${{ secrets.MONGODB_PORT }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }} >> .env
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo API_PREFIX=${{ secrets.API_PREFIX }} >> .env
          echo DB_TYPE=${{ secrets.DB_TYPE }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env

      - name: Login Dockerhub
        env:
          DOCKER_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKERHUB_PASSWORD}}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Build Docker Compose Services
        run: docker-compose build --no-cache
      - name: Push Docker Compose Images
        run: docker-compose push

  deploy:
    needs: build
    runs-on: [self-hosted, 'hororok']
    steps:
      # ###### 필요할때만 활성화 (파일전송시 ec2 폴더 초기화됨 (인증서 사라짐)) ######
      # ########### docker-compose.yml, nginx.conf 수정시엔 ec2 직접가서 수정)
      # - uses: actions/checkout@v3
      #############################
      - name: Create .env file
        run: |
          sudo rm -rf .env
          echo SERVER_PORT=${{ secrets.SERVER_PORT }} >> .env
          echo MONGODB_URL=${{ secrets.MONGODB_URL }} >> .env
          echo MONGODB_PORT=${{ secrets.MONGODB_PORT }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }} >> .env
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo API_PREFIX=${{ secrets.API_PREFIX }} >> .env
          echo DB_TYPE=${{ secrets.DB_TYPE }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
          echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> .env

      - name: Login to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Deploy
        run: |
          CONTAINERS=$(docker ps -qa)
          if [ -n "$CONTAINERS" ]; then
            sudo docker rm -f $CONTAINERS
          fi
          sudo docker-compose pull
          docker-compose up -d
          docker image prune -f
